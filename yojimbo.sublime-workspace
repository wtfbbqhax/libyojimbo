{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ALL",
				"ALLOCATOR_ERROR_FAILED_TO_ALLOCATE"
			],
			[
				"GetNum",
				"GetNumPacketTypes"
			],
			[
				"PACKET",
				"PACKET_FACTORY_ERROR_ALLOCATOR_IS_EXHAUSTED"
			],
			[
				"SERVER_CLIENT_ERROR",
				"SERVER_CLIENT_ERROR_STREAM_ALLOCATOR"
			],
			[
				"MESSA",
				"MESSAGE_FACTORY_ERROR_FAILED_TO_ALLOCATE_MESSAGE"
			],
			[
				"SERVER_RES",
				"SERVER_RESOURCE_PER_CLIENT"
			],
			[
				"m_m",
				"m_maxClients"
			],
			[
				"Reset",
				"ResetEncryptionMappings"
			],
			[
				"m_streamAllo",
				"m_clientStreamAllocator"
			],
			[
				"m_stream",
				"m_clientStreamAllocator"
			],
			[
				"m_global",
				"m_globalStreamAllocator"
			],
			[
				"m_alloc",
				"m_allocateConnections"
			],
			[
				"ADDRESS_FILTER",
				"ADDRESS_FILTER_IPV6_ONLY"
			],
			[
				"ADDR",
				"ADDRESS_FILTER_IPV4_ONLY"
			],
			[
				"numMes",
				"numMessagesSent"
			],
			[
				"Max",
				"MaxSmallMessageSize"
			],
			[
				"sender",
				"senderToReceiverPrivateKey"
			],
			[
				"numCh",
				"numChannelsWithData"
			],
			[
				"allocat",
				"Allocator"
			],
			[
				"clienttransport",
				"clientTransport2"
			],
			[
				"m_send",
				"m_messageSendQueue"
			],
			[
				"CONNECTION",
				"CONNECTION_COUNTER_PACKETS_READ"
			],
			[
				"m_mess",
				"m_messageSentPackets"
			],
			[
				"numMess",
				"numMessagesReceivedFromClient"
			],
			[
				"num",
				"numMessagesReceivedFromClient"
			],
			[
				"last",
				"lastHeartBeatSendTime"
			],
			[
				"CLIENT_",
				"CLIENT_SERVER_PACKET_CONNECTION_DISCONNECT"
			],
			[
				"Proc",
				"ProcessMessageAck"
			],
			[
				"SentPac",
				"MessageSentPacketEntry"
			],
			[
				"Con",
				"ConnectionConfig"
			],
			[
				"maxMes",
				"maxMessagesPerPacket"
			],
			[
				"ERROR",
				"CONNECTION_ERROR_NONE"
			],
			[
				"Mess",
				"MessageMagic"
			],
			[
				"TEST_PACK",
				"TEST_PACKET_CONNECTION"
			],
			[
				"Connet",
				"ConnectTokenBytes"
			],
			[
				"encrypted",
				"encryptedConnectTokenBase64"
			],
			[
				"Conn",
				"ConnectTokenBytes"
			],
			[
				"MaxS",
				"MaxServersPerConnectToken"
			],
			[
				"server",
				"ServerAddresses"
			],
			[
				"ConnectT",
				"ConnectTokenExpirySeconds"
			],
			[
				"base_",
				"base64_encode_string"
			],
			[
				"serve",
				"serverAddressBase64"
			],
			[
				"libyo",
				"libyojimbo_version"
			],
			[
				"YOJ",
				"YOJIMBO_PLATFORM"
			],
			[
				"Conne",
				"ConnectionFailed"
			],
			[
				"CLIENT_STATE_",
				"CLIENT_STATE_CHALLENGE_RESPONSE_TIMED_OUT"
			],
			[
				"Find",
				"FindConnectTokenEntry"
			],
			[
				"Net",
				"NetworkSimulator"
			],
			[
				"HeartB",
				"ConnectionHeartBeatPacket"
			],
			[
				"GetFirst",
				"GetFirstLocalIPV4Address"
			],
			[
				"ADDRES",
				"ADDRESS_IPV4"
			],
			[
				"INSE",
				"YOJIMBO_INSECURE_CONNECT"
			],
			[
				"InsecureC",
				"InsecureConnectPacket"
			],
			[
				"CLIENT_STATE",
				"CLIENT_STATE_SENDING_INSECURE_CONNECT"
			],
			[
				"serialize_int",
				"serialize_uint64"
			],
			[
				"m_all",
				"m_allPacketTypes"
			],
			[
				"CLIENT_SERVER",
				"CLIENT_SERVER_PACKET_CONNECTION_HEARTBEAT"
			],
			[
				"Is",
				"IsEncryptedPacketType"
			],
			[
				"Challenge",
				"ChallengeTokenBytes"
			],
			[
				"CLIENT_STATE_CONNECT",
				"CLIENT_STATE_CONNECTION_DENIED"
			],
			[
				"exp",
				"expiryTimestamp"
			],
			[
				"time",
				"timestampOffsetInSeconds"
			],
			[
				"m_",
				"m_encryptionMappingTimeout"
			],
			[
				"s",
				"source"
			],
			[
				"CLIENT",
				"CLIENT_STATE_SENDING_CHALLENGE_RESPONSE"
			],
			[
				"PACKET_P",
				"PACKET_PROCESSOR_WRITE_PACKET_FAILED"
			],
			[
				"client",
				"client_to_server_key"
			],
			[
				"decr",
				"decryptedMessageLength"
			],
			[
				"CLIENT_STATE_CONN",
				"CLIENT_STATE_CONNECTION_REQUEST_TIMED_OUT"
			],
			[
				"CLIENT_STAT",
				"CLIENT_STATE_SENDING_CHALLENGE_RESPONSE"
			],
			[
				"m_last",
				"m_lastPacketReceiveTime"
			],
			[
				"m_clie",
				"m_clientConnected"
			],
			[
				"PACKET_",
				"PACKET_CONNECTION_CHALLENGE"
			],
			[
				"CLIENT_S",
				"CLIENT_STATE_SENDING_CONNECTION_REQUEST"
			],
			[
				"SOCKET_ERROR_BIND_",
				"SOCKET_ERROR_BIND_IPV6_FAILED"
			],
			[
				"SOCKET_ERROR",
				"SOCKET_ERROR_SOCKOPT_IPV6_ONLY_FAILED"
			],
			[
				"Cha",
				"ChallengeTimeOut"
			],
			[
				"m_hash",
				"m_challengeHash"
			],
			[
				"ch",
				"ChallengeHashSize"
			],
			[
				"Se",
				"ServerChallengeHash"
			],
			[
				"Chan",
				"ChallengeHashSize"
			],
			[
				"challenge",
				"challenge_entry"
			],
			[
				"PROTOCOL",
				"PROTOCOL2_DECLARE_VIRTUAL_SERIALIZE_FUNCTIONS"
			],
			[
				"aggregate",
				"aggregateReadHeader"
			],
			[
				"PROTOCOL2_ERROR_SER",
				"PROTOCOL2_ERROR_SERIALIZE_HEADER_FAILED"
			],
			[
				"aggreg",
				"aggregatePacketHeader"
			],
			[
				"PROTOCOL2_ERROR_FAIL",
				"PROTOCOL2_ERROR_SERIALIZE_HEADER_FAILED"
			],
			[
				"PROTOCOL2_ERROR",
				"PROTOCOL2_ERROR_CREATE_PACKET_FAILED"
			],
			[
				"MaxPe",
				"MaxPacketsPerIteration"
			],
			[
				"numPackets",
				"numPacketsRead"
			],
			[
				"max",
				"maxPacketsToRead"
			],
			[
				"MaxPackets",
				"MaxPacketsPerIteration"
			],
			[
				"numPAckets",
				"numPacketsWritten"
			],
			[
				"previous",
				"previous"
			],
			[
				"prve",
				"previous"
			],
			[
				"nu",
				"previousChunkNumSlices"
			],
			[
				"force",
				"forceAckPreviousChunk"
			],
			[
				"Packet",
				"PacketBufferEntry"
			],
			[
				"SERIALIZE_",
				"PROTOCOL2_SERIALIZE_OBJECT"
			],
			[
				"rec",
				"receivedFragments"
			],
			[
				"MaxFrag",
				"MaxFragmentsPerPacket"
			],
			[
				"total",
				"total_fragments"
			],
			[
				"sequence",
				"sequence_difference"
			],
			[
				"MAX",
				"MaxFragmentSize"
			],
			[
				"PROTOCOL2_ERR",
				"PROTOCOL2_STREAM_ERROR_NONE"
			],
			[
				"TEST_PACKET",
				"TEST_PACKET_NUM_TYPES"
			],
			[
				"SYNC_MODE_",
				"SYNC_MODE_ADAPTIVE_SMOOTHING"
			],
			[
				"SYNC_MODE_QU",
				"SYNC_MODE_QUANTIZE_ON_BOTH_SIDES"
			],
			[
				"SYNC",
				"SYNC_MODE_UNCOMPRESSED"
			],
			[
				"min",
				"min_ticks_ahead"
			],
			[
				"old_st",
				"oldest_input_in_packet"
			],
			[
				"ready_to_",
				"ready_to_apply_adjustment_offset"
			],
			[
				"time_",
				"time_last_dropped_input"
			],
			[
				"server_cet",
				"server_get_client_input"
			],
			[
				"Input",
				"InputSlidingWindowSize"
			],
			[
				"ready",
				"ready_to_apply_sync"
			],
			[
				"client_",
				"client_sync_data"
			],
			[
				"tim",
				"time_last_packet_received"
			],
			[
				"PACKET_TYPE",
				"PACKET_TYPE_INPUT"
			],
			[
				"PACKET_TYPE_",
				"PACKET_TYPE_CONNECTION_DENIED"
			],
			[
				"PACK",
				"PACKET_TYPE_CONNECTION_REQUEST"
			],
			[
				"COMP",
				"COMPRESSION_MODE_ORIENTATION"
			],
			[
				"COM",
				"COMPRESSION_MODE_NO_VELOCITY"
			],
			[
				"position",
				"position_error_dist_squared"
			],
			[
				"pos",
				"position_error"
			],
			[
				"STATE",
				"STATEFUL_MODE_INPUT_AND_STATE"
			],
			[
				"Priority",
				"CubePriorityInfo"
			],
			[
				"Quant",
				"QuantizedPositionBoundXY"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/User/Markdown Render [Grip].sublime-build",
					""
				],
				[
					"Packages/User/Markdown Render [Grip].sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/User/Markdown Render [Grip].sublime-build",
					""
				],
				[
					"Packages/User/Markdown Render [Grip].sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/User/C++11 (Server).sublime-build",
					""
				],
				[
					"Packages/User/C++11 (Server).sublime-build",
					"Run"
				]
			],
			[
				"Packages/User/C++11 (Server).sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 27.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"TODO",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"syntax mark",
				"Set Syntax: Markdown"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"install package",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"package install",
				"Package Control: Install Package"
			],
			[
				"Packinst",
				"Package Control: Install Package"
			],
			[
				"git",
				"Git: Commit history"
			],
			[
				"",
				"Package Control: Discover Packages"
			],
			[
				"Pack",
				"Package Control: Disable Package"
			],
			[
				"Package",
				"Preferences: Browse Packages"
			],
			[
				"Clang",
				"Preferences: SublimeClang Settings – User"
			],
			[
				"Sub",
				"Preferences: SublimeClang Settings – Default"
			],
			[
				"Install",
				"Package Control: Install Package"
			]
		],
		"width": 485.0
	},
	"console":
	{
		"height": 416.0,
		"history":
		[
			"print 'hello'",
			"print \"hello\"",
			"ls",
			"ls -al",
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": true,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/gaffer/git/libyojimbo"
	],
	"file_history":
	[
		"/Users/gaffer/git/libyojimbo/TODO",
		"/Users/gaffer/git/libyojimbo/CHANGES.md",
		"/Users/gaffer/git/libyojimbo/yojimbo_packet.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_message.h",
		"/Users/gaffer/oculus/TODO",
		"/Users/gaffer/git/libyojimbo/yojimbo_client_server.cpp",
		"/Users/gaffer/git/libyojimbo/tests/shared.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_client_server.h",
		"/Users/gaffer/git/libyojimbo/tests/test.cpp",
		"/Users/gaffer/git/libyojimbo/.git/MERGE_MSG",
		"/Users/gaffer/git/libyojimbo/tlsf/tlsf.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_allocator.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_allocator.h",
		"/Users/gaffer/git/libyojimbo/tests/simple_messages.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_connection.h",
		"/Users/gaffer/git/libyojimbo/tests/profile.cpp",
		"/Users/gaffer/git/libyojimbo/tests/soak.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_channel.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_packet_processor.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_transport.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_connection.cpp",
		"/Users/gaffer/git/libyojimbo/WOULD BE NICE",
		"/Users/gaffer/git/libyojimbo/tests/client.cpp",
		"/Users/gaffer/git/libyojimbo/premake5.lua",
		"/Users/gaffer/git/libyojimbo/docker/copyFiles.bat",
		"/Users/gaffer/Desktop/CLIENT SERVER",
		"/Users/gaffer/oculus/key.txt",
		"/Users/gaffer/oculus/NOTES",
		"/Users/gaffer/git/libyojimbo/yojimbo_address.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_channel.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_sequence_buffer.h",
		"/Users/gaffer/Documents/WISHLIST",
		"/Users/gaffer/git/libyojimbo/tests/connect.cpp",
		"/Users/gaffer/git/libyojimbo/tests/client_server.cpp",
		"/Users/gaffer/git/libyojimbo/tests/server.cpp",
		"/Users/gaffer/Desktop/RELEASE",
		"/Users/gaffer/git/libyojimbo/simple_messages.make",
		"/usr/include/assert.h",
		"/Users/gaffer/Documents/star citizen/log.txt",
		"/Users/gaffer/git/libyojimbo/yojimbo_packet.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_packet_processor.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_config.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_transport.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_context.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_context.h",
		"/Users/gaffer/Desktop/star citizen/SERVER MIGRATION NOTES",
		"/Users/gaffer/Desktop/star citizen/OWNERSHIP AUTHORITY NOTES",
		"/Users/gaffer/Desktop/star citizen/NOTES",
		"/Users/gaffer/Desktop/star citizen/SERIALIZED COMPONENT NOTES",
		"/Users/gaffer/Desktop/star citizen/KEY POINTS",
		"/Users/gaffer/Desktop/star citizen/log.txt",
		"/Users/gaffer/git/libyojimbo/RESEARCH.md",
		"/Users/gaffer/git/libyojimbo/windows/sodium/randombytes_sysrandom.h",
		"/Users/gaffer/Desktop/star citizen/QUESTIONS",
		"/Users/gaffer/git/libyojimbo/.travis.yml",
		"/Users/gaffer/git/libyojimbo/docker/matcher/Dockerfile",
		"/Users/gaffer/git/libyojimbo/BUILDING.md",
		"/Users/gaffer/git/libyojimbo/docker/Dockerfile",
		"/Users/gaffer/Desktop/star citizen/intro.txt",
		"/Users/gaffer/git/libyojimbo/.travis.yaml",
		"/Users/gaffer/Desktop/yojimbo_model.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_stream.h",
		"/Users/gaffer/git/libyojimbo/server.cpp",
		"/Users/gaffer/git/libyojimbo/shared.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_serialize.h",
		"/Users/gaffer/git/libyojimbo/simple_messages.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_matcher.cpp",
		"/Users/gaffer/git/libyojimbo/test.cpp",
		"/Users/gaffer/git/libyojimbo/NOTES",
		"/Users/gaffer/git/libyojimbo/yojimbo_network.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo.h",
		"/Users/gaffer/git/libyojimbo/windows/mbedtls/padlock.h",
		"/Users/gaffer/git/libyojimbo/bin/client_server",
		"/Users/gaffer/git/libyojimbo/yojimbo_encryption.h",
		"/Users/gaffer/git/libyojimbo/profile.cpp",
		"/Users/gaffer/git/libyojimbo/rapidjson/stream.h",
		"/Users/gaffer/git/libyojimbo/soak.cpp",
		"/Users/gaffer/git/libyojimbo/connect.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_network.h",
		"/Users/gaffer/git/libyojimbo/cov-int/build-log.txt",
		"/Users/gaffer/git/libyojimbo/.gitignore",
		"/Users/gaffer/git/libyojimbo/rapidjson/stringbuffer.h",
		"/Users/gaffer/git/libyojimbo/rapidjson/schema.h",
		"/Users/gaffer/git/libyojimbo/rapidjson/pointer.h",
		"/Users/gaffer/git/libyojimbo/rapidjson/filereadstream.h",
		"/Users/gaffer/git/libyojimbo/rapidjson/document.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_address.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_common.cpp",
		"/Users/gaffer/git/libyojimbo/rapidjson/reader.h",
		"/Users/gaffer/git/libyojimbo/info.cpp",
		"/Users/gaffer/git/libyojimbo/DESIGN.md",
		"/Users/gaffer/git/libyojimbo/memory.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_common.h",
		"/Users/gaffer/git/libyojimbo/messages.cpp",
		"/Users/gaffer/git/libyojimbo/client_server.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_sockets.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_simulator.h",
		"/Users/gaffer/git/libyojimbo/docker/runServer.bat",
		"/Users/gaffer/git/libyojimbo/docker/matcher/matcher.go",
		"/Users/gaffer/git/libyojimbo/rapidjson/internal/strtod.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_simulator.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_sockets.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_encryption.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_interface.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_bitpack.h",
		"/Users/gaffer/git/libyojimbo/client.cpp",
		"/Users/gaffer/git/protocol/src/Core/Log.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_queue.h",
		"/Users/gaffer/git/libyojimbo/output.txt",
		"/Users/gaffer/git/libyojimbo/yojimbo_interface.h",
		"/Users/gaffer/git/libyojimbo/cppcheck.txt",
		"/Users/gaffer/git/libyojimbo/test.make",
		"/Users/gaffer/git/libyojimbo/yojimbo_platform.cpp",
		"/Users/gaffer/git/libyojimbo/yojimbo_helpers.h",
		"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/new",
		"/Users/gaffer/git/libyojimbo/ROADMAP.md",
		"/Users/gaffer/Documents/KARAOKI",
		"/Users/gaffer/git/libyojimbo/rapidjson/allocators.h",
		"/Users/gaffer/git/libyojimbo/rapidjson/encodedstream.h",
		"/Users/gaffer/git/protocol/src/Protocol/ReliableMessageChannel.cpp",
		"/Users/gaffer/git/libyojimbo/windows/sodium/crypto_onetimeauth_poly1305.h",
		"/Users/gaffer/git/libyojimbo/yojimbo_bit_array.h",
		"/Users/gaffer/git/protocol/src/Protocol/ReliableMessageChannel.h",
		"/Users/gaffer/git/libyojimbo/test.txt",
		"/Users/gaffer/git/protocol/tests/Protocol/TestReliableMessageChannel.cpp",
		"/Users/gaffer/git/libyojimbo/windows/sodium/crypto_hash_sha256.h",
		"/Users/gaffer/git/libyojimbo/windows/mbedtls/ssl_internal.h"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"-CHANGES,-TODO,-WOULDBENICE",
			"-CHANGES,-TODO",
			"<open files>",
			"-CHANGES,-TODO",
			"<open files>",
			"-CHANGES,-TODO",
			"<open files>",
			"-CHANGES,-TODO",
			"",
			"-CHANGES,-TODO",
			"-CHANGES,TODO",
			"-CHANGES",
			"-CHANGES -TODO",
			"",
			"*.h,*.cpp",
			"*.h;*.cpp",
			"*.h *.cpp",
			"",
			"sam/*.h;sam/*.cpp",
			"sam/*.h,sam/*.cpp",
			"sam/*.h sam/*.cpp",
			"*.h *.cpp",
			"*.h,*.cpp",
			"*.h;*.cpp",
			"*.h,*.cpp",
			"*.h;*.cpp",
			"*.h *.cpp",
			"",
			"*.h",
			"*.cpp",
			"*.cpp *.h",
			"*.cpp; *.h",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"// todo",
			"ConnectionConfirmSendRate",
			"MaxConnectTokenEntries",
			"base transport:",
			"InitializeContext",
			"printf( \"client connect",
			"InsecureConnect",
			"InitializeContext",
			"SetContext",
			"InitializeContext",
			"ProcessPacket",
			"InitializeContext",
			"->SetContext",
			"SetContext",
			"connectionConfig = ",
			"InitializeContext",
			"connectionConfig = ",
			"connectionPacketType",
			"context",
			"ConnectionPacket",
			"CreateContext",
			"InitializeGlobalContext",
			"token_reuse",
			"is_full",
			"connectionConfig",
			"uint32_t size",
			"directories",
			"// todo",
			"MessageSentPacketEntry",
			"Message",
			"connection_client_server",
			"insecure_connect",
			"insecure_conncet",
			"game_packets",
			";",
			"server.Stop()",
			"server_connect",
			"ClientData",
			"connection_client_server",
			"reconnect",
			"messageSendQueueSize",
			"GamePacketFactory",
			"is",
			"packet type %d is not allowed",
			"packetFactory->",
			"m_packetFactory",
			"packetFactory = ",
			"AddContext",
			"Transport",
			"::Stop",
			"m_clientPacketFactory",
			"m_clientPacket",
			"CreateHeartBeatPacket",
			"m_clientPacketFactory",
			"CreateClientPacket",
			"m_clientPacketFactory",
			"CreatePacket",
			"::SendPackets",
			"CreatePacket",
			"->Release()",
			"->Release",
			"DestroyPacket",
			"PacketFactory",
			"DestroyPacket",
			"CreateGlobalPacket",
			"libyojimbo",
			"OnDisconnect",
			"Disconnect",
			"make all ",
			"release",
			"make all ",
			"x64",
			"release",
			"libucl",
			"SerializeAlign",
			"SerializeCheck",
			"WritePacket",
			"RELIABLE_CHANNEL",
			"CreatePacketFactory",
			"m_clientMessag",
			"ResetConnectionData",
			"OnDisconnect",
			"::Disconnect",
			"Disconnect()",
			"\"client disconnected",
			"\"client disconnected\"",
			"OnClientDisconnect",
			"MessageFactory",
			"Server::",
			"SECURE",
			"m_clientContext",
			"SetContext",
			"m_context",
			"m_clientContext",
			"CreateContext",
			"m_context = ",
			"SetContext",
			"CreateContext",
			"SetEncryptedPacketTypes",
			"CreateMessageFactory",
			"InitializeContext",
			"ClientServerContext",
			"CreateMessageFactory",
			"m_clientStreamAllocator",
			"streamAllocat",
			"SetContext",
			"m_streamAllocator = ",
			"m_transport->SetStream",
			"::WritePacket",
			"m_messageFactory",
			"ConnectClient",
			"ResetEncryption",
			"ResetEncrypt",
			"ReadPacket",
			"m_streamAllocator",
			"SetContext",
			"MessageFactory",
			"::Start",
			"::Connect",
			"ClientServerResource",
			"ResourceType",
			"Allocator & GetDefaultAllocator",
			"GetDefaultAllocator",
			"MallocAllocator",
			"Create",
			"Allocator",
			"assert( !",
			"~Client"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"SequenceBuffer",
			"sequence_buffer",
			"SequenceBuffer",
			"sliding_window",
			"network_buffer.",
			"NetworkBuffer<",
			"ring_buffer",
			"CORE_ASSERT",
			"CORE_ASSERT_CLOSE",
			"CORE_ASSERT",
			"CORE_CHECK",
			"CORE_ARRAY_NEW",
			"CORE_NEW_ARRAY",
			"CORE_DELETE_ARRAY",
			"CORE_DELETE",
			"CORE_NEW",
			"CORE_ASSERT",
			"Simulator::",
			"memory_globals.",
			"global.",
			"PROTOCOL_CHECK(",
			"PROTOCOL_ASSERT(",
			"assert",
			"bitpacker",
			"    ",
			"namespace sam",
			"namespace sam {",
			"America 2008-2012",
			"netProtocolOld.h"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 370.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "yojimbo.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"todo",
				"libyojimbo/TODO"
			],
			[
				"packet.h",
				"libyojimbo/yojimbo_packet.h"
			],
			[
				"message.h",
				"libyojimbo/yojimbo_message.h"
			],
			[
				"changes",
				"libyojimbo/CHANGES.md"
			],
			[
				"test.cpp",
				"libyojimbo/tests/test.cpp"
			],
			[
				"client_serevr.h",
				"libyojimbo/yojimbo_client_server.h"
			],
			[
				"client_server.h",
				"libyojimbo/yojimbo_client_server.h"
			],
			[
				"connection.cpp",
				"libyojimbo/yojimbo_connection.cpp"
			],
			[
				"client_server.cpp",
				"libyojimbo/yojimbo_client_server.cpp"
			],
			[
				"transport.c",
				"libyojimbo/yojimbo_transport.cpp"
			],
			[
				"client.cpp",
				"libyojimbo/tests/client.cpp"
			],
			[
				"channel.cpp",
				"libyojimbo/yojimbo_channel.cpp"
			],
			[
				"server.cpp",
				"libyojimbo/yojimbo_client_server.cpp"
			],
			[
				"server.h",
				"libyojimbo/yojimbo_client_server.h"
			],
			[
				"copyfil",
				"libyojimbo/docker/copyFiles.bat"
			],
			[
				"premake5.lua",
				"libyojimbo/premake5.lua"
			],
			[
				"client.h",
				"libyojimbo/yojimbo_client_server.h"
			],
			[
				"would",
				"libyojimbo/WOULD BE NICE"
			],
			[
				"connection.h",
				"libyojimbo/yojimbo_connection.h"
			],
			[
				"tlsf.h",
				"libyojimbo/tlsf/tlsf.h"
			],
			[
				"tls",
				"libyojimbo/tlsf/tlsf.h"
			],
			[
				"tlsf",
				"libyojimbo/tlsf/tlsf.h"
			],
			[
				"allocator.h",
				"libyojimbo/yojimbo_allocator.h"
			],
			[
				"address.h",
				"libyojimbo/yojimbo_address.h"
			],
			[
				"sequence",
				"libyojimbo/yojimbo_sequence_buffer.h"
			],
			[
				"shared.h",
				"libyojimbo/tests/shared.h"
			],
			[
				"premake",
				"libyojimbo/premake5.lua"
			],
			[
				"connect.cpp",
				"libyojimbo/tests/connect.cpp"
			],
			[
				"server.cp",
				"libyojimbo/tests/server.cpp"
			],
			[
				"soak.cpp",
				"libyojimbo/tests/soak.cpp"
			],
			[
				"profile.cpp",
				"libyojimbo/tests/profile.cpp"
			],
			[
				"client",
				"libyojimbo/yojimbo_client_server.cpp"
			],
			[
				"simple_messages.cpp",
				"libyojimbo/tests/simple_messages.cpp"
			],
			[
				"simpl",
				"libyojimbo/simple_messages.make"
			],
			[
				"channel",
				"libyojimbo/yojimbo_channel.h"
			],
			[
				"config.h",
				"libyojimbo/yojimbo_config.h"
			],
			[
				"transport.cpp",
				"libyojimbo/yojimbo_transport.cpp"
			],
			[
				"context.cpp",
				"libyojimbo/yojimbo_context.cpp"
			],
			[
				"processor.cpp",
				"libyojimbo/yojimbo_packet_processor.cpp"
			],
			[
				"packet.cpp",
				"libyojimbo/yojimbo_packet.cpp"
			],
			[
				"packet_",
				"libyojimbo/yojimbo_packet_processor.h"
			],
			[
				"context",
				"libyojimbo/yojimbo_context.h"
			],
			[
				"transport.h",
				"libyojimbo/yojimbo_transport.h"
			],
			[
				"wouldbenice",
				"libyojimbo/WOULD BE NICE"
			],
			[
				"re",
				"libyojimbo/RESEARCH.md"
			],
			[
				"client_server.",
				"libyojimbo/yojimbo_client_server.cpp"
			],
			[
				"notes",
				"libyojimbo/windows/sodium/randombytes_sysrandom.h"
			],
			[
				"copy",
				"libyojimbo/docker/copyFiles.bat"
			],
			[
				"docker",
				"libyojimbo/docker/Dockerfile"
			],
			[
				"dockerfile",
				"libyojimbo/docker/matcher/Dockerfile"
			],
			[
				"server.",
				"libyojimbo/yojimbo_client_server.cpp"
			],
			[
				"research",
				"libyojimbo/RESEARCH.md"
			],
			[
				"change",
				"libyojimbo/CHANGES.md"
			],
			[
				"res",
				"libyojimbo/RESEARCH.md"
			],
			[
				"buiding.md",
				"libyojimbo/BUILDING.md"
			],
			[
				"log.txt",
				"~/Desktop/star citizen/log.txt"
			],
			[
				".tra",
				"libyojimbo/.travis.yml"
			],
			[
				"trav",
				"libyojimbo/.travis.yml"
			],
			[
				"matcher.cpp",
				"libyojimbo/yojimbo_matcher.cpp"
			],
			[
				"stream.h",
				"libyojimbo/yojimbo_stream.h"
			],
			[
				"yojimbo_serialize.h",
				"libyojimbo/yojimbo_serialize.h"
			],
			[
				"woludbenice",
				"libyojimbo/WOULD BE NICE"
			],
			[
				"client_server",
				"libyojimbo/yojimbo_client_server.cpp"
			],
			[
				"block.h",
				"libyojimbo/windows/mbedtls/padlock.h"
			],
			[
				"allocatr.h",
				"libyojimbo/yojimbo_allocator.h"
			],
			[
				"server",
				"libyojimbo/yojimbo_client_server.cpp"
			],
			[
				"packet_processor.cpp",
				"libyojimbo/yojimbo_packet_processor.cpp"
			],
			[
				"packet_processor.h",
				"libyojimbo/yojimbo_packet_processor.h"
			],
			[
				"",
				"libyojimbo/yojimbo_client_server.h"
			],
			[
				"network.cpp",
				"libyojimbo/yojimbo_network.cpp"
			],
			[
				"context.h",
				"libyojimbo/yojimbo_context.h"
			],
			[
				"encryption.cpp",
				"libyojimbo/yojimbo_encryption.cpp"
			],
			[
				"encrypt",
				"libyojimbo/yojimbo_encryption.h"
			],
			[
				"yojimbo.h",
				"libyojimbo/yojimbo.h"
			],
			[
				"en",
				"libyojimbo/yojimbo_encryption.h"
			],
			[
				"client_srever.cpp",
				"libyojimbo/yojimbo_client_server.cpp"
			],
			[
				"yojimbo_allocator.h",
				"libyojimbo/yojimbo_allocator.h"
			],
			[
				"yojimbo.cpp",
				"libyojimbo/yojimbo.cpp"
			],
			[
				"yoj",
				"libyojimbo/yojimbo.cpp"
			],
			[
				"yojimob.h",
				"libyojimbo/yojimbo.h"
			],
			[
				"channel.h",
				"libyojimbo/yojimbo_channel.h"
			],
			[
				"stream",
				"libyojimbo/yojimbo_stream.h"
			],
			[
				"sahred.h",
				"libyojimbo/shared.h"
			],
			[
				"pre",
				"libyojimbo/premake5.lua"
			],
			[
				"premake5",
				"libyojimbo/premake5.lua"
			],
			[
				".git",
				"libyojimbo/.gitignore"
			],
			[
				"address.cpp",
				"libyojimbo/yojimbo_address.cpp"
			],
			[
				"building.md",
				"libyojimbo/BUILDING.md"
			],
			[
				"memory.cpp",
				"libyojimbo/memory.cpp"
			],
			[
				"memor",
				"libyojimbo/memory.cpp"
			],
			[
				"channelc.pp",
				"libyojimbo/yojimbo_channel.cpp"
			],
			[
				"messages.cpp",
				"libyojimbo/messages.cpp"
			],
			[
				"mess",
				"libyojimbo/messages.cpp"
			],
			[
				"pr",
				"libyojimbo/premake5.lua"
			],
			[
				"transpo",
				"libyojimbo/yojimbo_transport.h"
			],
			[
				"simulator.cpp",
				"libyojimbo/yojimbo_simulator.cpp"
			],
			[
				"socket",
				"libyojimbo/yojimbo_sockets.h"
			],
			[
				"cs.cpp",
				"libyojimbo/client_server.cpp"
			],
			[
				"connect",
				"libyojimbo/yojimbo_connection.cpp"
			],
			[
				"sockets.cpp",
				"libyojimbo/yojimbo_sockets.cpp"
			],
			[
				"clint_server.h",
				"libyojimbo/yojimbo_client_server.h"
			],
			[
				"premake5.lu",
				"libyojimbo/premake5.lua"
			],
			[
				"socket.cpp",
				"libyojimbo/yojimbo_sockets.cpp"
			],
			[
				"inter",
				"libyojimbo/yojimbo_interface.cpp"
			],
			[
				"process",
				"libyojimbo/yojimbo_packet_processor.cpp"
			],
			[
				"common.h",
				"libyojimbo/yojimbo_common.h"
			],
			[
				"cliet_server",
				"libyojimbo/yojimbo_client_server.h"
			],
			[
				"mesage.h",
				"libyojimbo/yojimbo_message.h"
			],
			[
				"serialize.h",
				"libyojimbo/yojimbo_serialize.h"
			],
			[
				"queue.h",
				"libyojimbo/yojimbo_queue.h"
			],
			[
				"yojimbo_packet.cpp",
				"libyojimbo/yojimbo_packet.cpp"
			],
			[
				"bitpack.h",
				"libyojimbo/yojimbo_bitpack.h"
			],
			[
				"output.txt",
				"libyojimbo/output.txt"
			],
			[
				"output.tx",
				"libyojimbo/output.txt"
			],
			[
				"sockets.h",
				"libyojimbo/yojimbo_sockets.h"
			],
			[
				"interface.h",
				"libyojimbo/yojimbo_interface.h"
			],
			[
				"packte.h",
				"libyojimbo/yojimbo_packet.h"
			],
			[
				"channel.",
				"libyojimbo/yojimbo_channel.h"
			],
			[
				"conenction.h",
				"libyojimbo/yojimbo_connection.h"
			],
			[
				"build",
				"libyojimbo/BUILDING.md"
			],
			[
				"test.make",
				"libyojimbo/test.make"
			],
			[
				"platform.cpp",
				"libyojimbo/yojimbo_platform.cpp"
			],
			[
				"common.cpp",
				"libyojimbo/yojimbo_common.cpp"
			],
			[
				"seuence_bufer",
				"libyojimbo/yojimbo_sequence_buffer.h"
			],
			[
				"sequence.h",
				"libyojimbo/yojimbo_sequence_buffer.h"
			],
			[
				"simulator.h",
				"libyojimbo/yojimbo_simulator.h"
			],
			[
				"profil",
				"libyojimbo/profile.cpp"
			],
			[
				"packets.h",
				"libyojimbo/yojimbo_packet_processor.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 404.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 276.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
